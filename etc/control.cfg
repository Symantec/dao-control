# This is example config for DAO Control component.
# Required parameters are empty and must be set for the service to function.
# Optional parameters are set to their default values.
# Uncomment, modify and restart the service in order for the configuration
# to take effect.

[common]
# Section holds some general environment-specific settings.

# Whether to log debugging information.
# debug = False

# Path to configuration file for logging subsystem.
# log_config = /etc/dao/logger.cfg

# Abbreviation for geographical location of the environment.
# location =


[db]
# The SQLAlchemy connection string used to connect to the database
# sql_connection=mysql://user:pwd@127.0.0.1/dao?charset=utf8

# Verbosity of SQL debugging information. 0=None, 100=Everything
# sql_connection_debug=0

# Add python stack traces to SQL as comment strings
# sql_connection_trace=False

# Timeout before idle sql connections are reaped
# sql_idle_timeout=3600

# If set, use this value for max_overflow with sqlalchemy
# sql_max_overflow=None

# Maximum number of SQL connections to keep open in a pool
# sql_max_pool_size=5

# Maximum db connection retries during startup. (setting -1 implies an infinite retry count)
# sql_max_retries=10

# Minimum number of SQL connections to keep open in a pool
# sql_min_pool_size=1

# Interval between retries of opening a sql connection
# sql_retry_interval=10

# The filename to use with sqlite
# sqlite_db=dao.sqlite

# If passed, use synchronous mode for sqlite
# sqlite_synchronous=True


[dhcp]
# Use both neutron and DAO DHCPs if False
# all_neutron=False

# Path to DHCP helper
# driver=dao.control.worker.dhcp.neutron.NeutronHelper

# TFTP address
# tftp=


[dns]
# Configuration for DAO DNS back-end.

# DAO DNS management back-end module.
# driver = dao.control.worker.dns_helper.DNSTool

# DNS tool script location executed by DAO DNS management back-end.
# script_path = /usr/local/bin/dnstool

# DNS api key
# api_key =

# DNS url.
# api_url =


[foreman]
# Section with parameters for Foreman provisioning server.

# Foreman API endpoint URL.
# url = https://127.0.0.1:443

# Foreman user name for login.
# user = admin

# Foreman user password for login.
# password = changeme

# Foreman TFTP proxy address.
# proxy_tftp =

# DAO DHCP Proxy full URL (required if `use_dao_dhcp` is set to True).
# dhcp_proxy_url = tcp://0.0.0.0:5557

# Foreman environment name used for host validation.
# s1_environment = verification

# Foreman environment name used for host provisioning to S2.
# s2_environment = production

# Foreman hostgroup name for host validation.
# s1_os_name = verifying


[master]
# DAO Master configuration parameters.

# DAO Master RPC port.
# port = 5555


[openstack]
# URL to keystone
# auth_url=http://127.0.0.1:5000/v2.0

# Ironic python agent kernel image UUID
# image_name_kernel=vi-ipa.kernel

# Ironic python agent ram image UUID
# image_name_ram=vi-ipa.initramfs

# DAO user name to authorize to OpenStack
# username=user

# DAO password to authorize to OpenStack
# password=password

# OpenStack project for the DAO user
# project=project

# Openstack region name
# region=nova

[salt]
# Section for configuring Salt (SaltStack orchestration tool).

# Salt master host address.
# master_host =

# Salt master API port number.
# master_port = 8080

# Salt minion ID running on the master host.
# master_minion_id =

# Salt API user name.
# username = salt

# Salt API user password.
# password =


[switchconf]
# enabled = 1
# switch_user = switch_username
# switch_password = switch_password
# default_vlans = []
# vrf_mapping = {__default__: default}
# dhcp_relays = {ipmi: 192.168.1.1, mgmt: 192.168.1.1}
# required_features = [interface-vlan,lacp,dhcp,lldp]
# service_port_speed = 1Gb/s


[zmq]
# Section for ZeroMQ RPC configuration.

# IP address of the current host on management network (used by other
# components to send reply).
# ip =

# URL pattern to be used by RPC engine.
# url_pattern = tcp://{ip}:{port}

# Timeout for receiving RPC messages.
# rcv_timeout = 20

# Timeout for sending RPC messages.
# send_timeout = 20


[worker]
# DAO Worker configuration parameters.

# Unique name assigned to Worker for identification.
# name =

# Port listening for RPC messages to Worker.
# port = 5556

# Back-end module for orchestration.
# orchestration_driver = dao.control.worker.orchestration.driver.DummyDriver

# Back-end module for provisioning.
# provision_driver = dao.control.worker.provisioning.foreman.ForemanDriver


# Disable server autodiscovery features.
# discovery_disabled = False

# Log only discovered servers
# discovery_log_only=False

# Auto validate servers on discovery
# discovery_post_validation = False

# Network name where server FQDN is reachable.
# fqdn_net = prod

# Hook class to be used on server state change.
# hook=dao.control.worker.hooks.base.HookBase

# Default switch library
# switch_lib=dao.control.worker.switch.switchconf_helper.SwitchConf

# Network to VLAN mapping
# net2vlan = {'ipmi': 100, 'mgmt': 101, 'prod': 102, 'api': 103, 'data': 104}

# Port number of validation agent.
# validation_port = 5555

# User name for server IPMI access.
# ipmi_login =

# Password for server IPMI access.
# ipmi_password =

# Timeout for IPMI operation
# ipmi_timeout = 1200

# Name of a cluster to be used for discovered servers.
# spare_cluster = spare-pool

# Type of a spare cluster if being created.
# spare_cluster_type = service

# Name of a role to be used for discovered servers.
# spare_role = spare

# Validation scripts to run.
# validation_scripts = change_pass,update_ipmi,update_bios,cpe_power

# Path to validation scripts location.
# validation_scripts_path = /opt/dell-scripts

# Primary DNS resolver address.
# primary_dns =

# Secondary DNS resolver address.
# secondary_dns =

# DNS zone for environment.
# default_dns_zone =

# Change prod VLAN before provisioning. Workaround for old DC
change_prod_vlan=False
